class FlatIterator:

    def __init__(self, list_of_list):
        self.list_of_list = list_of_list
        self.outer_index = 0  # Индекс текущего вложенного списка
        self.inner_index = 0  # Индекс текущего элемента во вложенном списке

    def __iter__(self):#нужен что бы класс поддерживал итерацию
        return self

    def __next__(self):
        while self.outer_index < len(self.list_of_list):#Пока индекс текущего списка меньше чем длинна самого списка выполняется цикл
            if self.inner_index < len(self.list_of_list[self.outer_index]):#если индекс элемента списка меньше чем  длинна списка c индексом
                item = self.list_of_list[self.outer_index][self.inner_index]#итем это элемент с порядковым номером списка и иго места в списке
                self.inner_index += 1#счётчик
                return item
            else:
                self.outer_index += 1
                self.inner_index = 0
        raise StopIteration


def test_1():

    list_of_lists_1 = [
        ['a', 'b', 'c',],
        ['d', 'e', 'f', 'h', False],
        [1, 2, None]
    ]

    for flat_iterator_item, check_item in zip(
            FlatIterator(list_of_lists_1),
            ['a', 'b', 'c', 'd', 'e', 'f', 'h', False, 1, 2, None]
    ):
        assert flat_iterator_item == check_item

    assert list(FlatIterator(list_of_lists_1)) == ['a', 'b', 'c', 'd', 'e', 'f', 'h', False, 1, 2, None]


if __name__ == '__main__':
    test_1()
